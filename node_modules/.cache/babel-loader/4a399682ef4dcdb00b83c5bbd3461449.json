{"ast":null,"code":"import { SET_LOGIN_PENDING, SET_LOGIN_SUCCESS, SET_LOGIN_ERROR } from '../constants';\nexport var login = function login(email, password, history) {\n  return function (dispatch) {\n    dispatch(setLoginPending(true));\n    dispatch(setLoginSuccess(false));\n    dispatch(setLoginError(null));\n    callLoginApi(email, password, function (error) {\n      dispatch(setLoginPending(false));\n\n      if (!error) {\n        dispatch(setLoginSuccess(true));\n      } else {\n        dispatch(setLoginError(error));\n      }\n    });\n  };\n};\nexport var setLoginPending = function setLoginPending(isLoginPending) {\n  return {\n    type: SET_LOGIN_PENDING,\n    isLoginPending: isLoginPending\n  };\n};\nexport var setLoginSuccess = function setLoginSuccess(isLoginSuccess) {\n  return {\n    type: SET_LOGIN_SUCCESS,\n    isLoginSuccess: isLoginSuccess\n  };\n};\nexport var setLoginError = function setLoginError(loginError) {\n  return {\n    type: SET_LOGIN_ERROR,\n    loginError: loginError\n  };\n};\nexport var callLoginApi = function callLoginApi(email, password, callback) {\n  setTimeout(function () {\n    if (email === 'admin' && password === 'admin') {\n      return callback(null);\n    } else {\n      return callback(new Error('Invalid email and password'));\n    }\n  }, 1000);\n};","map":{"version":3,"sources":["/Users/deepanshu/react/xcite/src/actions/authActions.js"],"names":["SET_LOGIN_PENDING","SET_LOGIN_SUCCESS","SET_LOGIN_ERROR","login","email","password","history","dispatch","setLoginPending","setLoginSuccess","setLoginError","callLoginApi","error","isLoginPending","type","isLoginSuccess","loginError","callback","setTimeout","Error"],"mappings":"AAAA,SAAQA,iBAAR,EAA0BC,iBAA1B,EAA4CC,eAA5C,QAAkE,cAAlE;AAEA,OAAO,IAAMC,KAAK,GAAC,SAANA,KAAM,CAACC,KAAD,EAAQC,QAAR,EAAiBC,OAAjB;AAAA,SAA6B,UAAAC,QAAQ,EAAI;AACxDA,IAAAA,QAAQ,CAACC,eAAe,CAAC,IAAD,CAAhB,CAAR;AACAD,IAAAA,QAAQ,CAACE,eAAe,CAAC,KAAD,CAAhB,CAAR;AACAF,IAAAA,QAAQ,CAACG,aAAa,CAAC,IAAD,CAAd,CAAR;AACAC,IAAAA,YAAY,CAACP,KAAD,EAAQC,QAAR,EAAkB,UAAAO,KAAK,EAAI;AACrCL,MAAAA,QAAQ,CAACC,eAAe,CAAC,KAAD,CAAhB,CAAR;;AACA,UAAI,CAACI,KAAL,EAAY;AACVL,QAAAA,QAAQ,CAACE,eAAe,CAAC,IAAD,CAAhB,CAAR;AACD,OAFD,MAEO;AACLF,QAAAA,QAAQ,CAACG,aAAa,CAACE,KAAD,CAAd,CAAR;AACD;AACF,KAPW,CAAZ;AAQD,GAZgB;AAAA,CAAZ;AAeP,OAAO,IAAMJ,eAAe,GAAC,SAAhBA,eAAgB,CAACK,cAAD,EAAoB;AAC/C,SAAO;AACLC,IAAAA,IAAI,EAAEd,iBADD;AAELa,IAAAA,cAAc,EAAdA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,IAAMJ,eAAe,GAAC,SAAhBA,eAAgB,CAACM,cAAD,EAAoB;AAC/C,SAAO;AACLD,IAAAA,IAAI,EAAEb,iBADD;AAELc,IAAAA,cAAc,EAAdA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,IAAML,aAAa,GAAC,SAAdA,aAAc,CAACM,UAAD,EAAgB;AACzC,SAAO;AACLF,IAAAA,IAAI,EAAEZ,eADD;AAELc,IAAAA,UAAU,EAAVA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,IAAML,YAAY,GAAC,SAAbA,YAAa,CAACP,KAAD,EAAQC,QAAR,EAAkBY,QAAlB,EAA+B;AACvDC,EAAAA,UAAU,CAAC,YAAM;AACf,QAAId,KAAK,KAAK,OAAV,IAAqBC,QAAQ,KAAK,OAAtC,EAA+C;AAC7C,aAAOY,QAAQ,CAAC,IAAD,CAAf;AACD,KAFD,MAEO;AACL,aAAOA,QAAQ,CAAC,IAAIE,KAAJ,CAAU,4BAAV,CAAD,CAAf;AACD;AACF,GANS,EAMP,IANO,CAAV;AAOD,CARM","sourcesContent":["import {SET_LOGIN_PENDING,SET_LOGIN_SUCCESS,SET_LOGIN_ERROR} from '../constants';\n\nexport const login=(email, password,history) => dispatch => {\n    dispatch(setLoginPending(true));\n    dispatch(setLoginSuccess(false));\n    dispatch(setLoginError(null));\n    callLoginApi(email, password, error => {\n      dispatch(setLoginPending(false));\n      if (!error) {\n        dispatch(setLoginSuccess(true));\n      } else {\n        dispatch(setLoginError(error));\n      }\n    });\n  }\n\n\nexport const setLoginPending=(isLoginPending) => {\n  return {\n    type: SET_LOGIN_PENDING,\n    isLoginPending\n  };\n};\n\nexport const setLoginSuccess=(isLoginSuccess) => {\n  return {\n    type: SET_LOGIN_SUCCESS,\n    isLoginSuccess\n  };\n};\n\nexport const setLoginError=(loginError) => {\n  return {\n    type: SET_LOGIN_ERROR,\n    loginError\n  };\n};\n\nexport const callLoginApi=(email, password, callback) => {\n  setTimeout(() => {\n    if (email === 'admin' && password === 'admin') {\n      return callback(null);\n    } else {\n      return callback(new Error('Invalid email and password'));\n    }\n  }, 1000);\n};\n\n"]},"metadata":{},"sourceType":"module"}